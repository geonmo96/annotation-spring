객체의 생성이 언제되는지 알기 위한 프로젝트 
	- HomeController.java의 생성자만 보면 될듯

1. home-controller의 생성자만 출력됨.
context-config.xml은 자동적으로 실행되지 않음.
GenericXmlApplicationContext ctx = new GenericXmlApplicationContext("classpath:config/context-config.xml");
위의 코드로 xml파일을 읽어야함
-----------------------------------------------------------------------------------------------------------------------
2. 하지만 WEB-INF안의 servlet-context.xml파일에 context-config.xml의 내용을 넣으면
HomeController보다 먼저 TestClass의 객체가 생성된다.
서버를 구동하게 되면 web.xml파일을 가장 먼저 확인한다
web.xml파일의 19번째 줄에 servlet-context.xml을 실행시키는 내용이 있기 때문에 먼저 실행되는 것.
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
하지만. 객체는 만들어졌지만 그 값을 출력해보면 null값임. - 직접적인 데이터 주입이 없기 때문에.

위의 사항을 해결하기 위해 나온 어노테이션이 @Autowired이다.
@AutoWired는 실행과정의 마지막에 실행되며 데이터를 자동적으로 주입해주는 기능을 함.

주의점으로는 @Autowired를 사용하기 위해서는 객체가 서버를 구동하는 중에 데이터가 만들어져 있어야 한다는 것. > 에러 발생
-----------------------------------------------------------------------------------------------------------------------
3. HomeController는 언제 생성될까?
servlet-context.xml파일의 com.care.controller를 기본 페키지로 설정하는 내용으로
그 패키지 안에 있는 @controller 어노테이션이 설정되어 있다면 객체를 생성함.(어노테이션을 이용한 객체 생성) - component-scane

객체를 생성시켜주는 어노테이션 종류
@controller : 컨트롤 하기 위함.
@service : 보편적으로 로직을 담당하는 곳 - dao와의 연결하는 단
@repository : dao 데이터베이스 관련된 클래스에 사용
@Component : 그냥 객체를 생성할 때 - 위의 내용과 관련 없는 클레스를 생성할 때
@Configuration : 설정할 때 사용 
이와 같은 객체 생성 어노테이션을 이용해서 객체를 생성해도 되고, xml파일을 이용해서 객체를 생성해도 된다.
어노테이션마다 기능이 다른건 없음.
-----------------------------------------------------------------------------------------------------------------------
4. @component로 클래스에 어노테이션을 설정하면 객체가 생성됨을 알수있음. - com.care.test.Test
-----------------------------------------------------------------------------------------------------------------------
5. xml파일을 서버단에서 실행되게 할 수 있음 - web.xml파일의 9번재 줄 - context-param에 추가하면 됨
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/spring/root-context.xml
			classpath:config/context-config02.xml
		</param-value>
	</context-param>
혼동할 수도 있는 점은 servlet-context.xml에 설정한 bean은 서버단에서 실행만 됨. 즉 객체가 생성되진 않음 > 생성시키려면 @Autowired를 사용함.
하지만 web.xml파일의 context-param은 자동적으로 객체가 생성됨
-----------------------------------------------------------------------------------------------------------------------
6. 연계성을 생각할 필요가 있음.
왜냐. 어노테이션으로 객체를 자동적으로 생성하고, 데이터 값도 넣어져 있다면
new 연산자를 사용해 새로운 객체를 만들면 있던 데이터가 사라짐 > 즉 어노테이션으로 데이터를 만든다면 쭉 어노테이션으로 사용해야함.(데이터가 저장되어 있다면)
-----------------------------------------------------------------------------------------------------------------------
하나의 인터페이스에 서로 다른 여러개의 클래스를 사용하고 싶을 경우 
7. 어노테이션을 이용해서 하나의 인터페이스에 여러개의 클래스를 @Autowired하고 싶다면
ApplicationContext를 사용하면 된다 > 이 안에 있는 overried는 자동적으로 실행되는 메소드이다. 
	> 현재 container에 존재하는 bean 중에서 내가 원하는 bean을 가져올 수 있다
예시로는 하나의 클레스를 만들고 그 클래스에 implements ApplicationContext를 상속받으면 ovrride한다.
override한 메소드안에 있는 applicationContext를 외부에서도 사용할 수 있게 static으로 만든다.
@Component
public class AC implements ApplicationContextAware{ // ac : applicationContext
	public static ApplicationContext applicationContext;
	@Override
	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
		// 자동적으로 실행
		// container에 저장되어 있는 bean들을 가져올 수 있음
		System.out.println("자동으로 실행된다");
		this.applicationContext = applicationContext;
	}
}
사용할 때는 
인터페이스 객체 = (객체타입)applicationContext.getBean("인터페이스 객체를 상속받는 클래스 명 - 맨 첫글자만 소문자로");
	private MyService ms;
	private ApplicationContext ac = AC.applicationContext;
		ms = (MyServiceImpl)ac.getBean("myServiceImpl");
-----------------------------------------------------------------------------------------------------------------------
하나의 클래스를 @Autowired를 하려는데 여러개의 bean이 존재해 에러가 나는 경우
에러의 끝단 (->)에 bean을 선택하라는 메시지가 나온다.
spring은 타입에 맞춰서 매핑을 해준다.
같은 타입의 여러 빈이 있어서 매핑이 안되는 것임.
그래서 @Autowired밑에 @Qualifier("bean.name")을 적용하면 에러가 해결됨.
@Repository같은 서버 동작과정에서 생성되는 빈은 이름을 따로 설정하지 않았다면 맨 앞글자만 소문자인 bean이 설정된다.
현재 프로젝트에는 @repository와 context-config02.xml파일에서 2개의 빈이 생성된다(testDAO, dao02)
	> @Autowired를 사용하기 싫다면 xml파일에 Qualifier속성을 지정해주면 된다
	
또한 주의사항으로는 appServlet/servlet-context.xml파일에 미리 빈을 생성할 경우 이것이 우선매핑된다. - 오작동 주의
